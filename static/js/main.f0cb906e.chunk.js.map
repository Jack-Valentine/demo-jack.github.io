{"version":3,"sources":["config/chart-config.js","components/chart.js","App.js","serviceWorker.js","index.js"],"names":["ChartConfig","textStyle","fontSize","backgroundColor","tooltip","trigger","axisPointer","type","legend","data","color","show","grid","left","right","bottom","xAxis","scale","boundaryGap","axisLine","onZero","lineStyle","animationDurationUpdate","yAxis","position","dataZoom","start","end","series","name","symbolSize","itemStyle","markLine","animation","label","formatter","distance","markPoint","symbol","window","location","href","repeat","coord","Chart","props","useState","defaultConfig","chart","useRef","chartInstance","addZero","num","target","toString","length","useEffect","chartData","renderInstance","echarts","getInstanceByDom","current","lastPoint","init","last","lastValue","currentDate","moment","format","currentSec","split","config","i","date","add","sec","push","remainSec","parseInt","console","log","setOption","noMerge","lazyLoad","renderChart","dispose","ref","style","height","App","setChartData","genData","unixTime","min","max","local","Math","floor","random","startTimestamp","utc","valueOf","endTimestamp","genChartData","genedData","React","updateData","setTimeout","tmpChartData","currentTime","shift","clearTimeout","width","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0cb906e.chunk.js","sourcesContent":["const ChartConfig = () => {\n  const upColor = '#54A29A';\n  const upBorderColor = '#54A29A';\n  const downColor = '#DA5D55';\n  const downBorderColor = '#DA5D55';\n\n  return {\n    textStyle: {\n      fontSize: 20\n    },\n    backgroundColor: '#161821',\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'cross'\n      }\n    },\n    legend: {\n      data: ['FX'],\n      textStyle: {\n        color: '#fff'\n      },\n      show: false\n    },\n    grid: {\n      left: '10%',\n      right: '10%',\n      bottom: '15%'\n    },\n    xAxis: {\n      type: 'category',\n      data: [],\n      scale: true,\n      boundaryGap: false,\n      axisLine: {onZero: false, lineStyle: { color: '#8392A5' }},\n      animationDurationUpdate: 1000\n    },\n    yAxis: {\n      scale: true,\n      position: 'right',\n      axisLine: { lineStyle: { color: '#8392A5' } },\n    },\n    dataZoom: [\n      {\n        type: 'inside',\n        start: 92,\n        end: 100\n      }\n    ],\n    series: [\n      {\n        name: 'FX',\n        type: 'line',\n        data: [],\n        symbolSize: 0,\n        itemStyle: {\n          color: '#FFFF'\n        },\n        animationDurationUpdate: 1000,\n        markLine: {\n          animation: false,\n          lineStyle: {\n            type: 'solid'\n          },\n          data: [],\n          label: {\n            formatter: '{b}',\n            distance: 40\n          }\n        },\n        markPoint: {\n          symbol: `image://${window.location.href}images/dot.gif`,\n          symbolSize: 10,\n          itemStyle: {\n            color: 'rgb(0, 255, 0)',\n            repeat: 'repeat'\n          },\n          data: [\n            {\n              name: 'Last Data',\n              coord: [],\n              itemStyle: {\n                color: 'limegreen'\n              }\n            },\n          ]\n        },\n      }\n    ]\n  }\n};\n\nexport default ChartConfig","import React, {useEffect, useState, useRef} from \"react\";\nimport echarts from 'echarts'\nimport ChartConfig from \"../config/chart-config\";\nimport moment from \"moment\";\n\nconst Chart = (props) => {\n  const [chartOption, setChartOption] = useState({});\n  const defaultConfig = ChartConfig();\n  const chart = useRef(null);\n\n  let chartInstance = null;\n  function addZero(num) {\n    let target = num.toString();\n    if (target.length < 2) {\n      target = `0${target}`;\n    }\n    return target;\n  }\n  function renderChart(chartData) {\n    const renderInstance = echarts.getInstanceByDom(chart.current);\n    const xAxis = [...chartData.xAxis];\n    const yAxis = [...chartData.yAxis];\n    const lastPoint = [xAxis[xAxis.length - 1], yAxis[yAxis.length - 1]];\n\n    if (renderInstance) {\n      chartInstance = renderInstance;\n    } else {\n      chartInstance = echarts.init(chart.current);\n    }\n    const last = xAxis[xAxis.length - 1];\n    const lastValue = yAxis[yAxis.length - 1];\n    const currentDate = `${moment().format('YYYY-MM-DD')} ${last}`;\n    const currentSec = last ? last.split(':')[2] : '';\n    const config = defaultConfig;\n\n    for (let i = 1; i < 35; i++) {\n      const date = moment(currentDate).add(i, 'second').format('HH:mm:ss');\n      const sec = date.split(':')[2];\n      xAxis.push(date);\n      yAxis.push(null);\n      if (sec === '00' || sec === '30') {\n        let remainSec = parseInt(currentSec) >= 30 ? 60 - parseInt(currentSec) : 30 - parseInt(currentSec);\n        if (i > 30) {\n          remainSec += 30;\n        }\n        config.series[0].markLine.data.push({ xAxis: date, name: `00:${addZero(remainSec)}` });\n      }\n    }\n\n    if (lastValue) {\n      config.series[0].markLine.data.push({\n        yAxis: lastValue,\n        name: lastValue,\n        label: {\n          formatter: '{b}',\n          distance: [300, 10],\n          position: 'insideEndTop'\n        }\n      });\n    }\n    // config.series[0].markLine.data[0] = { xAxis: last }\n\n    config.xAxis.data = xAxis;\n    config.series[0].data = yAxis;\n    config.series[0].markPoint.data[0].coord = lastPoint;\n\n    console.log('LAST DATA');\n    console.log(last);\n    console.log()\n    chartInstance.setOption(config, {\n      noMerge: true,\n      lazyLoad: true\n    });\n  }\n  useEffect(() => {\n    renderChart(props.chartData);\n  }, [props.chartData]);\n  useEffect(() => {\n    return () => {\n      chartInstance && chartInstance.dispose();\n    };\n  }, []);\n  return (\n    <>\n      <div\n        ref={chart}\n        style={{\n          height: \"800px\",\n          // background: \"gray\"\n        }}\n      />\n    </>\n  );\n};\n\nexport default Chart;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport moment from 'moment';\nimport Chart from \"./components/chart\";\n\nfunction App() {\n\n  const [chartData, setChartData] = useState({\n    xAxis: [],\n    yAxis: []\n  });\n  const [loopFlag, setLoopFlag] = useState(false);\n\n  function randomIntFromInterval(min, max) { // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const genData = (unixTime) => {\n    const local = moment(unixTime).local().format('HH:mm:ss');\n    const baseLine = randomIntFromInterval(1500, 2500);\n\n    return {\n      local: local,\n      data: baseLine\n    }\n  };\n\n  useEffect(() => {\n    const startTimestamp = moment.utc().valueOf() - 86400 * 1000;\n    const endTimestamp = moment.utc().valueOf();\n    const genChartData = {\n      xAxis: [],\n      yAxis: []\n    };\n    for (let i = startTimestamp; i < endTimestamp; i += 1000 * 60) {\n      const genedData = genData(i);\n      genChartData.xAxis.push(genedData.local);\n      genChartData.yAxis.push(genedData.data);\n    }\n    setChartData(genChartData);\n  }, []);\n\n  React.useEffect(() => {\n    const updateData = setTimeout(() => {\n      const tmpChartData = {...chartData};\n      const currentTime = moment.utc().valueOf();\n      const genedData = genData(currentTime);\n\n      tmpChartData.xAxis.shift();\n      tmpChartData.xAxis.push(genedData.local);\n      tmpChartData.yAxis.shift();\n      tmpChartData.yAxis.push(genedData.data);\n      console.log('----------');\n      console.log(genedData.local);\n      console.log(genedData.data);\n      setChartData(tmpChartData);\n    }, 1000);\n    return () => {\n      clearTimeout(updateData);\n    };\n  }, [chartData]);\n\n\n  return (\n    <div style={{width: '100vw', height: '100vh', backgroundColor: '#161821'}}>\n      <Chart chartData={chartData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}